/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-bucket",
factory: function (require) {
var plugin=(()=>{var v=Object.create,u=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var h=e=>u(e,"__esModule",{value:!0});var k=e=>{if(typeof require!="undefined")return require(e);throw new Error('Dynamic require of "'+e+'" is not supported')};var M=(e,r)=>{for(var o in r)u(e,o,{get:r[o],enumerable:!0})},N=(e,r,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let t of R(r))!P.call(e,t)&&t!=="default"&&u(e,t,{get:()=>r[t],enumerable:!(o=y(r,t))||o.enumerable});return e},D=e=>N(h(u(e!=null?v(b(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var B={};M(B,{default:()=>$});var f=D(k("@yarnpkg/core"));var s=D(k("@yarnpkg/core"));function l(e,r){let{bucketName:o,modifier:t}=O(e),{topLevelWorkspace:p}=r.project,{buckets:c}=p.manifest.raw;if(c==null||c[o]==null)throw new s.ReportError(s.MessageName.UNNAMED,`Bucket ${JSON.stringify(o)} is not registered`);let i=c[o],n,a;if(typeof i=="string")n=s.structUtils.parseRange(i);else{if(typeof i.range!="string")throw new s.ReportError(s.MessageName.UNNAMED,`Invalid configuration for bucket ${JSON.stringify(o)}`);n=s.structUtils.parseRange(i.range),a=["~","^"].includes(i.peerModifier)?i.peerModifier:void 0}return t&&(n.selector=`${t}${n.selector}`),n.protocol==null&&(n.protocol=r.project.configuration.get("defaultProtocol")),{descriptor:s.structUtils.makeDescriptor(e,s.structUtils.makeRange(n)),peerModifier:a}}function O(e){let{selector:r}=s.structUtils.parseRange(e.range),o=r,t=null;return(o.startsWith("^")||o.startsWith("~"))&&(t=o[0],o=o.slice(1)),{bucketName:o,modifier:t}}var d="bucket:",m=class{supportsDescriptor(r){return r.range.startsWith(d)}supportsLocator(){return!1}shouldPersistResolution(){return!1}bindDescriptor(r){return r}getResolutionDependencies(r,o){return o.resolver.getResolutionDependencies(l(r,o).descriptor,o)}async getCandidates(r,o,t){return t.resolver.getCandidates(l(r,t).descriptor,o,t)}getSatisfying(r,o,t){return t.resolver.getSatisfying(l(r,t).descriptor,o,t)}async resolve(){throw new Error("Assertion: locators shouldn't be handled by bucket: resolver")}};var W={hooks:{beforeWorkspacePacking(e,r){var o,t;for(let p of["dependencies","devDependencies"])for(let c of e.manifest.getForScope(p).values()){if(f.structUtils.parseRange(c.range).protocol!==d)continue;let{descriptor:{range:i},peerModifier:n=""}=l(c,e),a=f.structUtils.stringifyIdent(c);if(((o=r[p])==null?void 0:o[a])&&(r[p][a]=i),p==="devDependencies"&&typeof((t=r.peerDependencies)==null?void 0:t[a])=="string"){let g=e.manifest.getForScope("peerDependencies").get(c.identHash);g&&/^[~^]?\*$/.test(g.range)&&(r.peerDependencies[a]=`${g.range.length>1?g.range[0]:n}${f.structUtils.parseRange(i).selector}`)}}}},resolvers:[m]},$=W;return B;})();
return plugin;
}
};
