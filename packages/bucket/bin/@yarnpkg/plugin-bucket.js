/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-bucket",
factory: function (require) {
"use strict";var plugin=(()=>{var f=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var v=Object.prototype.hasOwnProperty;var m=(o=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(o,{get:(e,r)=>(typeof require<"u"?require:e)[r]}):o)(function(o){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+o+'" is not supported')});var R=(o,e)=>{for(var r in e)f(o,r,{get:e[r],enumerable:!0})},b=(o,e,r,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of D(e))!v.call(o,s)&&s!==r&&f(o,s,{get:()=>e[s],enumerable:!(t=k(e,s))||t.enumerable});return o};var P=o=>b(f({},"__esModule",{value:!0}),o);var M={};R(M,{default:()=>N});var g=m("@yarnpkg/core");var n=m("@yarnpkg/core");function a(o,e){let{bucketName:r,modifier:t}=y(o),{topLevelWorkspace:s}=e.project,{buckets:p}=s.manifest.raw;if(p==null||p[r]==null)throw new n.ReportError(n.MessageName.UNNAMED,`Bucket ${JSON.stringify(r)} is not registered`);let c=p[r],i,u;if(typeof c=="string")i=n.structUtils.parseRange(c);else{if(typeof c.range!="string")throw new n.ReportError(n.MessageName.UNNAMED,`Invalid configuration for bucket ${JSON.stringify(r)}`);i=n.structUtils.parseRange(c.range),u=["~","^"].includes(c.peerModifier)?c.peerModifier:void 0}return t&&(i.selector=`${t}${i.selector}`),i.protocol==null&&(i.protocol=e.project.configuration.get("defaultProtocol")),{descriptor:n.structUtils.makeDescriptor(o,n.structUtils.makeRange(i)),peerModifier:u}}function y(o){let{selector:e}=n.structUtils.parseRange(o.range),r=e,t=null;return(r.startsWith("^")||r.startsWith("~"))&&(t=r[0],r=r.slice(1)),{bucketName:r,modifier:t}}var d="bucket:",l=class{supportsDescriptor(e){return e.range.startsWith(d)}supportsLocator(){return!1}shouldPersistResolution(){return!1}bindDescriptor(e){return e}getResolutionDependencies(e,r){return r.resolver.getResolutionDependencies(a(e,r).descriptor,r)}async getCandidates(e,r,t){return t.resolver.getCandidates(a(e,t).descriptor,r,t)}getSatisfying(e,r,t,s){return s.resolver.getSatisfying(a(e,s).descriptor,r,t,s)}async resolve(){throw new Error("Assertion: locators shouldn't be handled by bucket: resolver")}};var h={hooks:{beforeWorkspacePacking(o,e){for(let r of["dependencies","devDependencies"])for(let t of o.manifest.getForScope(r).values()){if(g.structUtils.parseRange(t.range).protocol!==d)continue;let{descriptor:{range:s},peerModifier:p=""}=a(t,o),c=g.structUtils.stringifyIdent(t);if(e[r]?.[c]&&(e[r][c]=s),r==="devDependencies"&&typeof e.peerDependencies?.[c]=="string"){let i=o.manifest.getForScope("peerDependencies").get(t.identHash);i&&/^[~^]?\*$/.test(i.range)&&(e.peerDependencies[c]=`${i.range.length>1?i.range[0]:p}${g.structUtils.parseRange(s).selector}`)}}}},resolvers:[l]},N=h;return P(M);})();
return plugin;
}
};
